
/* сама "страница" фиксированного размера */
.page{
  width:var(--page-w);
  height:var(--page-h);
  background:var(--page-bg);
  border-radius:calc(var(--radius) + 4px);
  padding:var(--gap);
  box-sizing:border-box;
  display:grid;
  gap:var(--gap);
  grid-template-columns: 1fr 2fr 1fr; /* по умолчанию */
  min-width:0; min-height:0;
  /* box-shadow: 0 6px 30px rgba(0,0,0,0.6); */
}

/* адаптивная логика по наличию колонок (использует :has()) */
.page:has(.left):has(.center):has(.right) { grid-template-columns: 1fr 2fr 1fr; }
.page:has(.left):has(.center):not(:has(.right)) { grid-template-columns: 1fr 3fr; }
.page:not(:has(.left)):has(.center):has(.right) { grid-template-columns: 3fr 1fr; }
.page:has(.center):not(:has(.left)):not(:has(.right)) { grid-template-columns: 1fr; }
.page:not(:has(.center)):has(.left):has(.right) { grid-template-columns: 1fr 1fr; }

/* назначение колонок (для grid) */
.left  { grid-column: 1 / 2; min-width:0; min-height:0; }
.center{ grid-column: 2 / 3; min-width:0; min-height:0; }
.right { grid-column: 3 / 4; min-width:0; min-height:0; }

/* --- КОЛОНКИ: поведение левой/правой --- */
/* Колонки—flex-колонки, но сами НЕ дают внешнего скролла (overflow: hidden).
   Вся логика скролла — внутри отдельных .box. */
.left, .right {
  display:flex;
  flex-direction:column;
  gap:var(--gap);
  align-items:stretch;
  min-width:0;
  min-height:0;
  overflow:hidden; /* важный момент: колонка не должна "выползать" за page */
  padding:0;
}

/* --- Дочерние .box в left/right: равномерно делят высоту колонки --- */
/* flex:1 1 0 — позволяет им уменьшаться, чтобы все были видны */
.left .box,
.right .box {
  flex: 1 1 0;      /* все .box равномерно делят высоту колонки */
  min-height: 0;    /* важно для корректной работы overflow внутри flex */
  overflow: auto;   /* если внутренняя часть слишком большая — появляется скролл у самого .box */
  /* padding:16px; */
  box-sizing:border-box;
  background:var(--panel-bg);
  border-radius:var(--radius);
  color:#eee;
  box-shadow: 0 2px 6px rgba(0,0,0,0.35);
}

/* .box_full — занимает чуть больше места, но не скрывает другие */
.box_full {
  flex: 2 1 0; /* занимает в 2 раза больше пространства, чем обычный .box */
  min-height: 0;
  overflow:auto;
}

/* --- Центр: один .box растягивается на весь центр --- */
.center {
  display:flex;
  flex-direction:column;
  min-width:0; min-height:0;
}
.center .box {
  flex: 1 1 0;
  min-height:0;
  overflow:auto;
  /* padding:18px; */
  box-sizing:border-box;
  background:var(--panel-bg);
  border-radius:var(--radius);
  color:#eee;
  box-shadow: 0 2px 6px rgba(0,0,0,0.35);
}

/* Если в центре несколько .box — они тоже равномерно поделят высоту (flex:1). */

/* фиксированный блок — не растёт и занимает ровно высоту переменной */
.box_fixed {
  /* не растём, не сжимаемся (фиксируем базовую высоту) */
  flex: 0 0 var(--box-fixed-height, 80px);
  height: var(--box-fixed-height, 80px);
  min-height: 0;   /* важно для корректного поведения в flex */
  max-height: var(--box-fixed-max-height, none);
  overflow: auto;  /* внутр. скролл, если контента больше */
  padding:16px;
  box-sizing:border-box;
  background:var(--panel-bg);
  border-radius:var(--radius);
  box-shadow: 0 2px 6px rgba(0,0,0,0.35);
}

/* удобные пресеты — можно применять вместо явного переопределения переменной */
.box_fixed--sm { --box-fixed-height: 56px; }
.box_fixed--md { --box-fixed-height: 80px; }
.box_fixed--lg { --box-fixed-height: 120px; }

/* пример: если нужен фиксированный шире/в ширину (редко для вертикального стека) */
.box_fixed_width {
  flex: 0 0 auto; /* не даём блоку тянуться по высоте */
  width: var(--box-fixed-width, 100%); /* управляем через переменную */
  max-width: 100%;
  box-sizing: border-box;
}